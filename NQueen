
#include <iostream>
using namespace std;

void printMatrix(int arr[][20] , int n){
    for(int i = 0 ; i < n ; i++){
        for(int j = 0 ; j < n ; j ++){            
            cout << arr[i][j] << " ";
        }
        cout << endl ;
    }
}

bool canPlace(int arr[][20] , int n , int x, int y){
    // dialogonal left
    int i = x ;
    int j = y;
    while(i>=0 && j>=0){
        if(arr[i][j] ==1){
            return false;
        }
        i-- ; j--;
    }
    // diagonal right
    i = x ;
    j = y;
    while(i>=0 && j>=0){
        if(arr[i][j] ==1){
            return false;
        }
        i-- ; j++;
    }
    // up
    for(int i = 0 ; i<x ; i++){
        if(arr[i][y] == 1){
            return false;
        }
    }
    return true;
}

bool NQueensSolve(int arr[][20] , int n , int i ){
    if(i == n){
        printMatrix(arr , n );
        return true;
    }
    for(int j = 0 ; j < n ; j++){
        if(canPlace(arr ,n, i ,j)){
            arr[i][j] = 1;
            bool success = NQueensSolve(arr , n , i+1);
            if(success){
                return true;
            }
            arr[i][j] = 0 ;
        }
    }
    return false;
}


int NQueenWays(int arr[][20] , int n , int i){
    if(i == n){
        // printMatrix(arr , n);
        // cout << endl;
        return 1;
    }
    int ways = 0 ;
    for(int j = 0 ; j < n ; j++){
        if(canPlace(arr ,n , i , j)){
            arr[i][j] = 1;
            ways += NQueenWays(arr , n , i+1);
            arr[i][j] = 0;
        }
    }
    return ways;
}


int main() {
    int arr[20][20] = {};
    int n = sizeof(arr)/sizeof(int);
    // NQueensSolve(arr , 4 , 0);
    cout << NQueenWays(arr , 8 , 0);
	// your code goes here
	return 0;
}

